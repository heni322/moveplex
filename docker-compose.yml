services:
  # PostgreSQL with PostGIS
  postgres:
    image: postgis/postgis:15-3.3
    container_name: ride_postgres_dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-ride_sharing_db}
      POSTGRES_USER: ${DATABASE_USER:-moveplex}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-moveplex}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - ride_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-moveplex} -d ${DATABASE_NAME:-ride_sharing_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    image: redis:7-alpine
    container_name: ride_redis_dev
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - ride_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # NestJS Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        NODE_ENV: ${NODE_ENV:-production}
    container_name: ride_app
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USER: ${DATABASE_USER:-moveplex}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-moveplex}
      DATABASE_NAME: ${DATABASE_NAME:-ride_sharing_db}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      JWT_SECRET: ${JWT_SECRET:-moveplex}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-moveplex}
      JWT_ACCESS_EXPIRY: ${JWT_ACCESS_EXPIRY:-15m}
      JWT_REFRESH_EXPIRY: ${JWT_REFRESH_EXPIRY:-7d}
      BCRYPT_ROUNDS: ${BCRYPT_ROUNDS:-12}
      PORT: 3000
      ORS_API_KEY: ${ORS_API_KEY}
      OPENROUTE_SERVICE_URL: ${OPENROUTE_SERVICE_URL}
    ports:
      - "3002:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ride_network
    volumes:
      - app_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local

networks:
  ride_network:
    driver: bridge