name: Deploy to VPS

on:
  push:
    branches: [ main, production ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'
    
    steps:
    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT }}
        script: |
          # Stop existing containers first
          if [ -d "/var/www/ride-sharing-app" ]; then
            cd /var/www/ride-sharing-app
            sudo docker-compose down || true
          fi
          
          # Check if directory exists and handle accordingly
          if [ -d "/var/www/ride-sharing-app" ]; then
            echo "üìÅ Directory /var/www/ride-sharing-app exists"
            cd /var/www/ride-sharing-app
            
            # Check if it's a git repository
            if [ -d ".git" ]; then
              echo "üîÑ Updating existing repository..."
              git fetch origin
              git reset --hard origin/main
              git clean -fd
            else
              echo "‚ö†Ô∏è  Directory exists but is not a git repository. Backing up and cloning fresh..."
              cd /var/www/
              sudo mv ride-sharing-app ride-sharing-app.backup.$(date +%Y%m%d_%H%M%S)
              git clone https://github.com/${{ github.repository }}.git ride-sharing-app
              cd ride-sharing-app
            fi
          else
            echo "üìÅ Creating new directory and cloning repository..."
            sudo mkdir -p /var/www/ride-sharing-app
            sudo chown $USER:$USER /var/www/ride-sharing-app
            cd /var/www/
            git clone https://github.com/${{ github.repository }}.git ride-sharing-app
            cd ride-sharing-app
          fi
          
          # Create .env file from secrets
          cat > .env << EOF
          DATABASE_HOST=postgres
          DATABASE_PORT=5432
          DATABASE_USER=${{ secrets.DATABASE_USER }}
          DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
          DATABASE_NAME=${{ secrets.DATABASE_NAME }}
          REDIS_HOST=redis
          REDIS_PORT=6379
          REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}
          JWT_ACCESS_EXPIRY=15m
          JWT_REFRESH_EXPIRY=7d
          BCRYPT_ROUNDS=12
          NODE_ENV=production
          PORT=3000
          ORS_API_KEY=${{ secrets.ORS_API_KEY }}
          OPENROUTE_SERVICE_URL=${{ secrets.OPENROUTE_SERVICE_URL }}
          EOF
          
          # Clean up Docker resources to ensure fresh build
          echo "üßπ Cleaning up Docker resources..."
          sudo docker-compose down --rmi all --volumes --remove-orphans || true
          sudo docker system prune -f || true
          
          # Build and start services
          echo "üî® Building and starting services..."
          sudo docker-compose up -d --build --force-recreate
          
          # Wait for services to be ready
          echo "‚è≥ Waiting for services to be ready..."
          sleep 60
          
          # Check service status
          echo "=== Service Status ==="
          sudo docker-compose ps
          
          # Show build logs if app failed to start
          if ! sudo docker-compose ps | grep -q "app.*Up"; then
            echo "=== App Build Logs ==="
            sudo docker-compose logs app
            exit 1
          fi
          
          # Wait for app to be fully ready before running migrations
          echo "‚è≥ Waiting for application to be ready..."
          sleep 30
          
          # Test basic connectivity first
          for i in {1..10}; do
            if sudo docker-compose exec -T app wget --spider http://localhost:3000/api/health 2>/dev/null; then
              echo "‚úÖ App is responding"
              break
            else
              echo "‚è≥ Attempt $i: App not ready, waiting..."
              sleep 10
            fi
          done
          
          # Run database migrations if available
          echo "üóÉÔ∏è  Running database migrations..."
          if sudo docker-compose exec -T app npm run typeorm:migration:run 2>/dev/null; then
            echo "‚úÖ Migrations completed successfully"
          elif sudo docker-compose exec -T app npx typeorm migration:run 2>/dev/null; then
            echo "‚úÖ Migrations completed successfully (alternative method)"
          else
            echo "‚ö†Ô∏è  Migration command not available or failed - this might be normal for first deployment"
          fi
          
          # Clean up unused Docker images
          sudo docker image prune -f
          
          # Show recent logs
          echo "=== Recent App Logs ==="
          sudo docker-compose logs --tail 30 app
          
          # Comprehensive health check
          echo "=== Health Check ==="
          sleep 15
          
          # Check if all containers are running
          if sudo docker-compose ps | grep -q "app.*Up"; then
            echo "‚úÖ App container is running"
            
            # Test app endpoint with retries - FIXED PORT
            for i in {1..8}; do
              if curl -f http://localhost:3000/api/health > /dev/null 2>&1; then
                echo "‚úÖ Application health check passed"
                break
              elif curl -f http://localhost:3000/health > /dev/null 2>&1; then
                echo "‚úÖ Application health check passed (alternative endpoint)"
                break
              else
                echo "‚è≥ Attempt $i: Application not responding yet, waiting..."
                sleep 15
              fi
            done
            
            # Final health check with both possible endpoints
            if curl -f http://localhost:3000/api/health > /dev/null 2>&1 || curl -f http://localhost:3000/health > /dev/null 2>&1; then
              echo "‚úÖ Final health check passed"
            else
              echo "‚ùå Application failed final health check"
              echo "=== Container Status ==="
              sudo docker-compose ps
              echo "=== App Container Logs ==="
              sudo docker-compose logs --tail 50 app
              echo "=== Trying to access app directly ==="
              sudo docker-compose exec -T app wget -O- http://localhost:3000/health 2>/dev/null || echo "Direct access failed"
              # Don't exit 1 here - let's see if the app is actually working
            fi
          else
            echo "‚ùå App container is not running"
            sudo docker-compose logs app
            exit 1
          fi
          
          # Check database and redis
          if sudo docker-compose ps | grep -q "postgres.*Up.*healthy"; then
            echo "‚úÖ PostgreSQL is healthy"
          else
            echo "‚ö†Ô∏è  PostgreSQL may not be healthy - checking..."
            sudo docker-compose ps | grep postgres
          fi
          
          if sudo docker-compose ps | grep -q "redis.*Up.*healthy"; then
            echo "‚úÖ Redis is healthy"
          else
            echo "‚ö†Ô∏è  Redis may not be healthy - checking..."
            sudo docker-compose ps | grep redis
          fi
          
          echo "üåê Your application should be available at: http://37.59.98.144:3002"
          echo "ü©∫ Health check endpoint: http://37.59.98.144:3002/api/health"
          echo "ü©∫ Alternative health check: http://37.59.98.144:3002/health"
          echo "üìã View logs with: sudo docker-compose logs -f"